{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nconst Mousse = () => {\n  _s();\n  useEffect(() => {\n    // Initialisation de la scène, de la caméra et du rendu\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Chargement de la texture pour la bulle de savon\n    const textureLoader = new THREE.TextureLoader();\n    const bubbleTexture = textureLoader.load('');\n\n    // Lumière ambiante pour éclairer uniformément les objets dans la scène\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Lumière directionnelle pour simuler la lumière du soleil\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 0).normalize(); // Direction de la lumière\n    scene.add(directionalLight);\n\n    // Fonction pour créer une bulle de savon\n    function createBubble() {\n      const geometry = new THREE.SphereGeometry(1, 32, 32);\n\n      // Matériau avec la texture et des reflets pour simuler l'iridescence\n      const material = new THREE.MeshStandardMaterial({\n        map: bubbleTexture,\n        transparent: true,\n        opacity: 0.8,\n        metalness: 0.7,\n        roughness: 0.1\n      });\n      const bubble = new THREE.Mesh(geometry, material);\n\n      // Positionnement aléatoire de la bulle sur l'écran\n      bubble.position.x = (Math.random() - 0.5) * 20;\n      bubble.position.y = (Math.random() - 0.5) * 20;\n      bubble.position.z = (Math.random() - 0.5) * 20;\n\n      // Taille aléatoire de la bulle\n      const scale = Math.random() * 3;\n      bubble.scale.set(scale, scale, scale);\n      scene.add(bubble);\n    }\n\n    // Création de nombreuses bulles de savon\n    for (let i = 0; i < 1000; i++) {\n      createBubble();\n    }\n\n    // Positionnement de la caméra\n    camera.position.z = 5;\n\n    // Fonction d'animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Animation des bulles de savon\n      scene.children.forEach(bubble => {\n        bubble.rotation.x += 0.001;\n        bubble.rotation.y += 0.001;\n      });\n\n      // Rendu de la scène\n      renderer.render(scene, camera);\n    };\n\n    // Appel de la fonction d'animation\n    animate();\n\n    // Nettoyage de la scène et du rendu lorsque le composant est démonté\n    return () => {\n      scene.children.forEach(bubble => {\n        scene.remove(bubble);\n      });\n      renderer.dispose();\n    };\n  }, []); // Le tableau vide indique que ce code ne s'exécutera qu'une seule fois, après le montage initial du composant\n\n  return null;\n};\n_s(Mousse, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Mousse;\nexport default Mousse;\nvar _c;\n$RefreshReg$(_c, \"Mousse\");","map":{"version":3,"names":["useEffect","THREE","Mousse","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","textureLoader","TextureLoader","bubbleTexture","load","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","normalize","createBubble","geometry","SphereGeometry","material","MeshStandardMaterial","map","transparent","opacity","metalness","roughness","bubble","Mesh","x","Math","random","y","z","scale","i","animate","requestAnimationFrame","children","forEach","rotation","render","remove","dispose","_c","$RefreshReg$"],"sources":["/Users/bastien/Desktop/MoussMouss/src/Components/Mousse/Mousse.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst Mousse = () => {\n  useEffect(() => {\n    // Initialisation de la scène, de la caméra et du rendu\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Chargement de la texture pour la bulle de savon\n    const textureLoader = new THREE.TextureLoader();\n    const bubbleTexture = textureLoader.load('');\n\n    // Lumière ambiante pour éclairer uniformément les objets dans la scène\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n\n    // Lumière directionnelle pour simuler la lumière du soleil\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 0).normalize(); // Direction de la lumière\n    scene.add(directionalLight);\n\n    // Fonction pour créer une bulle de savon\n    function createBubble() {\n      const geometry = new THREE.SphereGeometry(1, 32, 32);\n      \n      // Matériau avec la texture et des reflets pour simuler l'iridescence\n      const material = new THREE.MeshStandardMaterial({\n        map: bubbleTexture,\n        transparent: true,\n        opacity: 0.8,\n        metalness: 0.7,\n        roughness: 0.1\n      });\n\n      const bubble = new THREE.Mesh(geometry, material);\n\n      // Positionnement aléatoire de la bulle sur l'écran\n      bubble.position.x = (Math.random() - 0.5) * 20;\n      bubble.position.y = (Math.random() - 0.5) * 20;\n      bubble.position.z = (Math.random() - 0.5) * 20;\n\n      // Taille aléatoire de la bulle\n      const scale = Math.random() * 3;\n      bubble.scale.set(scale, scale, scale);\n\n      scene.add(bubble);\n    }\n\n    // Création de nombreuses bulles de savon\n    for (let i = 0; i < 1000; i++) {\n      createBubble();\n    }\n\n    // Positionnement de la caméra\n    camera.position.z = 5;\n\n    // Fonction d'animation\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Animation des bulles de savon\n      scene.children.forEach(bubble => {\n        bubble.rotation.x += 0.001;\n        bubble.rotation.y += 0.001;\n      });\n\n      // Rendu de la scène\n      renderer.render(scene, camera);\n    };\n\n    // Appel de la fonction d'animation\n    animate();\n\n    // Nettoyage de la scène et du rendu lorsque le composant est démonté\n    return () => {\n      scene.children.forEach(bubble => {\n        scene.remove(bubble);\n      });\n      renderer.dispose();\n    };\n  }, []); // Le tableau vide indique que ce code ne s'exécutera qu'une seule fois, après le montage initial du composant\n\n  return null;\n};\n\nexport default Mousse;\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}