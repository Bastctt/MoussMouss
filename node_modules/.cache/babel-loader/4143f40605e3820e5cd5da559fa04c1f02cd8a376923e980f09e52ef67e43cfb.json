{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nconst Mousse = () => {\n  _s();\n  useEffect(() => {\n    // Initialisation de la scène, de la caméra et du rendu\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Fonction pour créer une bulle de savon\n    function createBubble() {\n      // Géométrie d'une sphère\n      const geometry = new THREE.SphereGeometry(1, 32, 32);\n\n      // Matériau avec un shader pour l'effet de bulle de savon\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: {\n            value: 1.0\n          },\n          resolution: {\n            value: new THREE.Vector2()\n          }\n        },\n        vertexShader: `\n          varying vec3 vNormal;\n          void main() {\n            vNormal = normal;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        `,\n        fragmentShader: `\n          uniform float time;\n          uniform vec2 resolution;\n          varying vec3 vNormal;\n          void main() {\n            float intensity = abs(dot(normalize(vNormal), vec3(0.0, 1.0, 0.0)));\n            vec3 color = vec3(0.6, 0.8, 1.0) * intensity;\n            gl_FragColor = vec4(color, 1.0);\n          }\n        `\n      });\n      const bubble = new THREE.Mesh(geometry, material);\n\n      // Positionnement aléatoire de la bulle sur l'écran\n      bubble.position.x = (Math.random() - 0.5) * 20;\n      bubble.position.y = (Math.random() - 0.5) * 20;\n      bubble.position.z = (Math.random() - 0.5) * 20;\n\n      // Taille aléatoire de la bulle\n      const scale = Math.random() * 3;\n      bubble.scale.set(scale, scale, scale);\n      scene.add(bubble);\n    }\n\n    // Création de nombreuses bulles de savon\n    for (let i = 0; i < 1000; i++) {\n      createBubble();\n    }\n\n    // Positionnement de la caméra\n    camera.position.z = 5;\n\n    // Fonction d'animation\n    const animate = time => {\n      requestAnimationFrame(animate);\n\n      // Mise à jour du temps pour l'effet de bulle de savon\n      scene.children.forEach(bubble => {\n        bubble.material.uniforms.time.value = time * 0.001; // Utilisez le temps pour l'animation\n      });\n\n      // Rendu de la scène\n      renderer.render(scene, camera);\n    };\n\n    // Appel de la fonction d'animation\n    animate();\n\n    // Nettoyage de la scène et du rendu lorsque le composant est démonté\n    return () => {\n      scene.children.forEach(bubble => {\n        scene.remove(bubble);\n      });\n      renderer.dispose();\n    };\n  }, []); // Le tableau vide indique que ce code ne s'exécutera qu'une seule fois, après le montage initial du composant\n\n  return null;\n};\n_s(Mousse, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Mousse;\nexport default Mousse;\nvar _c;\n$RefreshReg$(_c, \"Mousse\");","map":{"version":3,"names":["useEffect","THREE","Mousse","_s","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","createBubble","geometry","SphereGeometry","material","ShaderMaterial","uniforms","time","value","resolution","Vector2","vertexShader","fragmentShader","bubble","Mesh","position","x","Math","random","y","z","scale","set","add","i","animate","requestAnimationFrame","children","forEach","render","remove","dispose","_c","$RefreshReg$"],"sources":["/Users/bastien/Desktop/MoussMouss/src/Components/Mousse/Mousse.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport * as THREE from 'three';\n\nconst Mousse = () => {\n  useEffect(() => {\n    // Initialisation de la scène, de la caméra et du rendu\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n\n    // Fonction pour créer une bulle de savon\n    function createBubble() {\n      // Géométrie d'une sphère\n      const geometry = new THREE.SphereGeometry(1, 32, 32);\n\n      // Matériau avec un shader pour l'effet de bulle de savon\n      const material = new THREE.ShaderMaterial({\n        uniforms: {\n          time: { value: 1.0 },\n          resolution: { value: new THREE.Vector2() }\n        },\n        vertexShader: `\n          varying vec3 vNormal;\n          void main() {\n            vNormal = normal;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        `,\n        fragmentShader: `\n          uniform float time;\n          uniform vec2 resolution;\n          varying vec3 vNormal;\n          void main() {\n            float intensity = abs(dot(normalize(vNormal), vec3(0.0, 1.0, 0.0)));\n            vec3 color = vec3(0.6, 0.8, 1.0) * intensity;\n            gl_FragColor = vec4(color, 1.0);\n          }\n        `\n      });\n\n      const bubble = new THREE.Mesh(geometry, material);\n\n      // Positionnement aléatoire de la bulle sur l'écran\n      bubble.position.x = (Math.random() - 0.5) * 20;\n      bubble.position.y = (Math.random() - 0.5) * 20;\n      bubble.position.z = (Math.random() - 0.5) * 20;\n\n      // Taille aléatoire de la bulle\n      const scale = Math.random() * 3;\n      bubble.scale.set(scale, scale, scale);\n\n      scene.add(bubble);\n    }\n\n    // Création de nombreuses bulles de savon\n    for (let i = 0; i < 1000; i++) {\n      createBubble();\n    }\n\n    // Positionnement de la caméra\n    camera.position.z = 5;\n\n    // Fonction d'animation\n    const animate = (time) => {\n      requestAnimationFrame(animate);\n\n      // Mise à jour du temps pour l'effet de bulle de savon\n      scene.children.forEach(bubble => {\n        bubble.material.uniforms.time.value = time * 0.001; // Utilisez le temps pour l'animation\n      });\n\n      // Rendu de la scène\n      renderer.render(scene, camera);\n    };\n\n    // Appel de la fonction d'animation\n    animate();\n\n    // Nettoyage de la scène et du rendu lorsque le composant est démonté\n    return () => {\n      scene.children.forEach(bubble => {\n        scene.remove(bubble);\n      });\n      renderer.dispose();\n    };\n  }, []); // Le tableau vide indique que ce code ne s'exécutera qu'une seule fois, après le montage initial du composant\n\n  return null;\n};\n\nexport default Mousse;\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}